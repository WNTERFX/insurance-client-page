import { db } from "../dbServer";

/**
 * Register (Sign In) a new client with Supabase Auth + clients_Table + policy_Table
 * @param {Object} params
 * @param {string} params.email
 * @param {string} params.password
 * @param {string} params.firstName
 * @param {string} params.familyName
 * @param {string} params.address
 * @param {string} params.phoneNumber
 * @param {string} params.policyType
 * @param {string} params.partnerId
 */
export async function signInClient({
  email,
  password,
  firstName,
  familyName,
  address,
  phoneNumber,
  policyType,
  partnerId,
}) {
  try {
    // 1. Create Auth user
    const { data: authData, error: authError } = await db.auth.signUp({
      email,
      password,
    });

    if (authError) {
      console.error("Auth error:", authError);
      return { success: false, error: authError.message };
    }

    const authUser = authData.user;
    if (!authUser) {
      return { success: false, error: "Auth user not created." };
    }

    // 2. Insert into clients_Table
    const { data: clientData, error: clientError } = await db
      .from("clients_Table")
      .insert([
        {
          first_Name: firstName,
          family_Name: familyName,
          address,
          phone_Number: phoneNumber,
          client_Registered: new Date().toISOString().split("T")[0],
          client_active: true,
          email,
          auth_id: authUser.id, // link to Supabase Auth
        },
      ])
      .select()
      .single();

    if (clientError) {
      console.error("Client insert error:", clientError);
      return { success: false, error: clientError.message };
    }

    // 3. Insert into policy_Table
    const { data: policyData, error: policyError } = await db
      .from("policy_Table")
      .insert([
        {
          policy_type: policyType,
          policy_is_active: true,
          client_id: clientData.uid, // link via FK
          partner_id: partnerId,
        },
      ])
      .select()
      .single();

    if (policyError) {
      console.error("Policy insert error:", policyError);
      return { success: false, error: policyError.message };
    }

    // Both internal_ids (C-..., P-...) will be auto-generated by DB
    return {
      success: true,
      user: {
        auth: authUser,
        client: clientData,
        policy: policyData,
      },
    };
  } catch (err) {
    console.error("Unexpected sign in error:", err);
    return { success: false, error: "Unexpected error occurred." };
  }
}